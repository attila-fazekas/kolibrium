/*
 * Copyright 2023-2025 Attila Fazekas & contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dev.kolibrium.ksp.annotations

/**
 * Marks an enum class as a source for generating a `PageLocators` class using kolibrium-codegen.
 *
 * The generated class:
 *  - will reside in the `generated` package and will have the same name as the annotated enum class.
 *  - will use locator delegate functions from the kolibrium-selenium module, so kolibrium-selenium
 *    must be on the classpath.
 *
 * Enum entries can be annotated with locators to specify the locator strategy and its corresponding value.
 *
 * For locating a single `WebElement`, the following locator annotations can be used:
 * - [ClassName]
 * - [CssSelector]
 * - [Id]
 * - [LinkText]
 * - [Name]
 * - [PartialLinkText]
 * - [TagName]
 * - [XPath]
 *
 * For locating multiple `WebElements`, the following locator annotations can be used:
 * - [ClassNames]
 * - [CssSelectors]
 * - [LinkTexts]
 * - [Names]
 * - [PartialLinkTexts]
 * - [TagNames]
 * - [XPaths]
 *
 * ### Example Usage:
 * ```kotlin
 * package dev.kolibrium.demo.locators
 *
 * import dev.kolibrium.ksp.annotations.Id
 * import dev.kolibrium.ksp.annotations.Locators
 * import dev.kolibrium.ksp.annotations.Name
 *
 * @Locators
 * enum class LoginPageLocators {
 *     @Id("user-name")
 *     username,
 *
 *     @Id("password")
 *     password,
 *
 *     loginButton
 * }
 * ```
 *
 * ### Generated File:
 * ```kotlin
 * // Code generated by kolibrium-codegen. Do not edit.
 * package dev.kolibrium.demo.locators.generated
 *
 * import dev.kolibrium.core.selenium.id
 * import dev.kolibrium.core.selenium.name
 * import org.openqa.selenium.WebDriver
 * import org.openqa.selenium.WebElement
 *
 * context(WebDriver)
 * public class LoginPageLocators {
 *   public val username: WebElement by id("user-name")
 *
 *   public val password: WebElement by id("password")
 *
 *   public val loginButton: WebElement by idOrName("loginButton")
 * }
 * ```
 */
@Retention(AnnotationRetention.SOURCE)
@Target(AnnotationTarget.CLASS)
public annotation class Locators

/**
 * Marks a class as a source for generating a navigation function for a Page Object class using kolibrium-codegen.
 *
 * The generated file will reside in the `generated` package and will have the same name as the annotated class.
 *
 * By annotating a class with `@Page`, you indicate that the class represents a web page and optionally specify
 * the relative URL to navigate to. The generated code will create a function that allows easy navigation
 * to the corresponding page using a `WebDriver`.
 *
 * ### Usage
 * - If no `value` is specified, the generated function navigates to the current URL (`currentUrl`).
 * - If a `value` (URL path) is provided, the generated function will navigate to that URL path relative to the
 *   current URL.
 *
 * ### Example 1: Without `value`
 * ```kotlin
 * package dev.kolibrium.demo.pages
 *
 * import dev.kolibrium.ksp.annotations.Page
 * import org.openqa.selenium.WebDriver
 *
 * context(WebDriver)
 * @Page
 * class LoginPage {
 *     // Implementation
 * }
 * ```
 * Generated function:
 * ```kotlin
 * // Code generated by kolibrium-codegen. Do not edit.
 * package dev.kolibrium.demo.pages.generated
 *
 * import dev.kolibrium.demo.pages.LoginPage
 * import kotlin.Unit
 * import org.openqa.selenium.WebDriver
 *
 * public fun WebDriver.loginPage(block: LoginPage.() -> Unit) {
 *   get("""${currentUrl}""")
 *   LoginPage().apply(block)
 * }
 * ```
 *
 * ### Example 2: With `value` specified
 * ```kotlin
 * context(WebDriver)
 * @Page("inventory.html")
 * class InventoryPage {
 *     // Implementation
 * }
 * ```
 * Generated function:
 * ```kotlin
 * public fun WebDriver.inventoryPage(block: InventoryPage.() -> Unit) {
 *   get("${'$'}{currentUrl}inventory.html")
 *   InventoryPage().apply(block)
 * }
 * ```
 *
 * @property value The relative URL path to navigate to when this page is accessed. Defaults to an empty string,
 * which means no navigation will be performed.
 *
 * @constructor Marks a class as a "page" and optionally sets the navigation path for that page.
 */
@Retention(AnnotationRetention.SOURCE)
@Target(AnnotationTarget.CLASS)
public annotation class Page(
    val value: String = "",
)
