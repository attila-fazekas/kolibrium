/*
 * Copyright 2023-2024 Attila Fazekas & contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@file:OptIn(ExperimentalCompilerApi::class)

package dev.kolibrium.ksp.processors

import com.tschuchort.compiletesting.KotlinCompilation.ExitCode.COMPILATION_ERROR
import com.tschuchort.compiletesting.KotlinCompilation.ExitCode.OK
import com.tschuchort.compiletesting.SourceFile.Companion.kotlin
import io.kotest.matchers.shouldBe
import io.kotest.matchers.string.shouldContain
import org.jetbrains.kotlin.compiler.plugin.ExperimentalCompilerApi
import org.junit.jupiter.api.Test

class LocatorsProcessorTest : ProcessorBaseTest() {
    @Test
    fun `enum class annotated with Locators and enum entries annotated with locators`() {
        val sourceFile =
            kotlin(
                "KolibriumTestLocators.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Locators
                enum class KolibriumTestLocators {
                    @ClassName("className")
                    entry1,

                    @CssSelector("cssSelector")
                    entry2,

                    @Id("id")
                    entry3,

                    @LinkText("linkText")
                    entry4,

                    @Name("name")
                    entry5,

                    @PartialLinkText("partialLinkText")
                    entry6,

                    @TagName("tagName")
                    entry7,

                    @XPath("xPath")
                    entry8,

                    @ClassNames("className")
                    entries1,

                    @CssSelectors("css")
                    entries2,

                    @LinkTexts("linkText")
                    entries3,

                    @Names("name")
                    entries4,

                    @PartialLinkTexts("partialLinkText")
                    entries5,

                    @TagNames("tagName")
                    entries6,

                    @XPaths("xPath")
                    entries7
                }
                """.trimIndent(),
            )

        val compilation = getCompilation(sourceFile)
        compilation.compile().exitCode shouldBe OK

        assertSourceEquals(
            """
            // Code generated by kolibrium-codegen. Do not edit.
            package dev.kolibrium.ksp.processors.test.generated

            import dev.kolibrium.selenium.WebElements
            import dev.kolibrium.selenium.className
            import dev.kolibrium.selenium.classNames
            import dev.kolibrium.selenium.cssSelector
            import dev.kolibrium.selenium.cssSelectors
            import dev.kolibrium.selenium.id
            import dev.kolibrium.selenium.linkText
            import dev.kolibrium.selenium.linkTexts
            import dev.kolibrium.selenium.name
            import dev.kolibrium.selenium.names
            import dev.kolibrium.selenium.partialLinkText
            import dev.kolibrium.selenium.partialLinkTexts
            import dev.kolibrium.selenium.tagName
            import dev.kolibrium.selenium.tagNames
            import dev.kolibrium.selenium.xPath
            import dev.kolibrium.selenium.xPaths
            import org.openqa.selenium.WebDriver
            import org.openqa.selenium.WebElement

            context(WebDriver)
            public class KolibriumTestLocators {
              public val entry1: WebElement by className("className")

              public val entry2: WebElement by cssSelector("cssSelector")

              public val entry3: WebElement by id("id")

              public val entry4: WebElement by linkText("linkText")

              public val entry5: WebElement by name("name")

              public val entry6: WebElement by partialLinkText("partialLinkText")

              public val entry7: WebElement by tagName("tagName")

              public val entry8: WebElement by xPath("xPath")

              public val entries1: WebElements by classNames("className")

              public val entries2: WebElements by cssSelectors("css")

              public val entries3: WebElements by linkTexts("linkText")

              public val entries4: WebElements by names("name")

              public val entries5: WebElements by partialLinkTexts("partialLinkText")

              public val entries6: WebElements by tagNames("tagName")

              public val entries7: WebElements by xPaths("xPath")
            }
            """.trimIndent(),
            actualFileName = "KolibriumTestLocators.kt",
            compilation = compilation,
        )
    }

    @Test
    fun `locator strategy annotation is missing`() {
        val sourceFile =
            kotlin(
                "KolibriumTestLocators.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Locators
                enum class KolibriumTestLocators {
                    entry
                }
                """.trimIndent(),
            )

        val compilation = getCompilation(sourceFile)
        compilation.compile().exitCode shouldBe OK

        assertSourceEquals(
            """
            // Code generated by kolibrium-codegen. Do not edit.
            package dev.kolibrium.ksp.processors.test.generated

            import dev.kolibrium.selenium.idOrName
            import org.openqa.selenium.WebDriver
            import org.openqa.selenium.WebElement

            context(WebDriver)
            public class KolibriumTestLocators {
              public val entry: WebElement by idOrName("entry")
            }
            """.trimIndent(),
            actualFileName = "KolibriumTestLocators.kt",
            compilation = compilation,
        )
    }

    @Test
    fun `locator strategy annotation has cacheLookup disabled`() {
        val sourceFile =
            kotlin(
                "KolibriumTestLocators.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Locators
                enum class KolibriumTestLocators {
                    @ClassName(locator = "className", cacheLookup = false)
                    entry1,

                    @Id(locator = "id", cacheLookup = true)
                    entry2,
                }
                """.trimIndent(),
            )

        val compilation = getCompilation(sourceFile)
        compilation.compile().exitCode shouldBe OK

        assertSourceEquals(
            """
            // Code generated by kolibrium-codegen. Do not edit.
            package dev.kolibrium.ksp.processors.test.generated

            import dev.kolibrium.selenium.className
            import dev.kolibrium.selenium.id
            import org.openqa.selenium.WebDriver
            import org.openqa.selenium.WebElement

            context(WebDriver)
            public class KolibriumTestLocators {
              public val entry1: WebElement by className(locator = "className", cacheLookup = false)

              public val entry2: WebElement by id("id")
            }
            """.trimIndent(),
            actualFileName = "KolibriumTestLocators.kt",
            compilation = compilation,
        )
    }

    @Test
    fun `locator strategy annotation has Mustache template`() {
        val sourceFile =
            kotlin(
                "KolibriumTestLocators.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Locators
                enum class KolibriumTestLocators {
                    @CssSelectors(locator = "//a[@class='{{color}}']")
                    colorTableCell,

                    @CssSelector(locator = "//a[@class='{{color}}'][contains(text(),'{{shape}}')]")
                    tableCell
                }
                """.trimIndent(),
            )

        val compilation = getCompilation(sourceFile)
        compilation.compile().exitCode shouldBe OK

        assertSourceEquals(
            """
            // Code generated by kolibrium-codegen. Do not edit.
            package dev.kolibrium.ksp.processors.test.generated

            import dev.kolibrium.selenium.WebElements
            import dev.kolibrium.selenium.cssSelector
            import dev.kolibrium.selenium.cssSelectors
            import kotlin.String
            import org.openqa.selenium.WebDriver
            import org.openqa.selenium.WebElement

            context(WebDriver)
            public class KolibriumTestLocators {
              public fun colorTableCell(color: String): WebElements {
                val locator = ${'"'}${'"'}${'"'}//a[@class='${'$'}color']${'"'}${'"'}${'"'}
                val elements: WebElements by cssSelectors(locator)
                return elements
              }

              public fun tableCell(color: String, shape: String): WebElement {
                val locator = ${'"'}${'"'}${'"'}//a[@class='${'$'}color'][contains(text(),'${'$'}shape')]${'"'}${'"'}${'"'}
                val element: WebElement by cssSelector(locator)
                return element
              }
            }
            """.trimIndent(),
            actualFileName = "KolibriumTestLocators.kt",
            compilation = compilation,
        )
    }

    // Negative tests

    @Test
    fun `class annotated with Locators`() {
        val sourceFile =
            kotlin(
                "KolibriumTestLocators.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Locators
                class KolibriumTestLocators {
                }
                """.trimIndent(),
            )

        val result = getCompilation(sourceFile).compile()
        result.exitCode shouldBe COMPILATION_ERROR

        result.messages shouldContain
            """
            Only enum classes can be annotated with @Locators. Please make sure "KolibriumTestLocators" is an enum class.
            """.trimIndent()
    }

    @Test
    fun `data class annotated with Locators`() {
        val sourceFile =
            kotlin(
                "KolibriumTestLocators.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Locators
                data class KolibriumTestLocators {
                }
                """.trimIndent(),
            )

        val result = getCompilation(sourceFile).compile()
        result.exitCode shouldBe COMPILATION_ERROR
        result.messages shouldContain
            """
            Only enum classes can be annotated with @Locators. Please make sure "KolibriumTestLocators" is an enum class.
            """.trimIndent()
    }

    @Test
    fun `object annotated with Locators`() {
        val sourceFile =
            kotlin(
                "KolibriumTestLocators.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Locators
                object KolibriumTestLocators {
                }
                """.trimIndent(),
            )

        val result = getCompilation(sourceFile).compile()
        result.exitCode shouldBe COMPILATION_ERROR
        result.messages shouldContain
            """
            Only enum classes can be annotated with @Locators. Please make sure "KolibriumTestLocators" is an enum class.
            """.trimIndent()
    }

    @Test
    fun `no enum entry defined`() {
        val sourceFile =
            kotlin(
                "KolibriumTestLocators.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Locators
                class KolibriumTestLocators {
                }
                """.trimIndent(),
            )

        val result = getCompilation(sourceFile).compile()
        result.exitCode shouldBe COMPILATION_ERROR
        result.messages shouldContain "At least one enum shall be defined in \"KolibriumTestLocators\"."
    }

    @Test
    fun `more than one locator annotation present`() {
        val sourceFile =
            kotlin(
                "KolibriumTestLocators.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Locators
                enum class KolibriumTestLocators {
                  @Id("usr")
                  @Name
                  username,

                  @Id("pass")
                  @Name
                  password
                }
                """.trimIndent(),
            )

        val result = getCompilation(sourceFile).compile()
        result.exitCode shouldBe COMPILATION_ERROR
        result.messages shouldContain "More than one locator annotation found on \"username\": @Id, @Name"
    }
}
