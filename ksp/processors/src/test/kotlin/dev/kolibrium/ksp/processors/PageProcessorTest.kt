/*
 * Copyright 2023-2024 Attila Fazekas & contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@file:OptIn(ExperimentalCompilerApi::class)

package dev.kolibrium.ksp.processors

import com.tschuchort.compiletesting.KotlinCompilation
import com.tschuchort.compiletesting.SourceFile
import io.kotest.matchers.string.shouldContain
import org.jetbrains.kotlin.compiler.plugin.ExperimentalCompilerApi
import org.junit.jupiter.api.io.TempDir
import java.io.File

class PageProcessorTest : ProcessorBaseTest() {
    @ValidTest
    fun `enum class annotated with Page and enum entries annotated with locators`(
        @TempDir path: File,
    ) {
        val sourceFile =
            SourceFile.kotlin(
                "KolibriumTestPage.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Page
                enum class KolibriumTestPage {
                    @ClassName("className")
                    entry1,

                    @CssSelector("cssSelector")
                    entry2,

                    @Id("id")
                    entry3,

                    @LinkText("linkText")
                    entry4,

                    @Name("name")
                    entry5,

                    @PartialLinkText("partialLinkText")
                    entry6,

                    @TagName("tagName")
                    entry7,

                    @Xpath("xpath")
                    entry8,

                    @ClassNames("className")
                    entries1,

                    @CssSelectors("css")
                    entries2,

                    @Ids("id")
                    entries3,

                    @LinkTexts("linkText")
                    entries4,

                    @Names("name")
                    entries5,

                    @PartialLinkTexts("partialLinkText")
                    entries6,

                    @TagNames("tagName")
                    entries7,

                    @Xpaths("xpath")
                    entries8
                }
                """.trimIndent(),
            )

        val compilation = getCompilation(path, sourceFile)
        verifyExitCode(compilation.compile(), KotlinCompilation.ExitCode.OK)

        assertSourceEquals(
            """
            // Code generated by kolibrium-codegen. Do not edit.
            package dev.kolibrium.ksp.processors.test.generated

            import dev.kolibrium.selenium.WebElements
            import dev.kolibrium.selenium.className
            import dev.kolibrium.selenium.classNames
            import dev.kolibrium.selenium.cssSelector
            import dev.kolibrium.selenium.cssSelectors
            import dev.kolibrium.selenium.id
            import dev.kolibrium.selenium.ids
            import dev.kolibrium.selenium.linkText
            import dev.kolibrium.selenium.linkTexts
            import dev.kolibrium.selenium.name
            import dev.kolibrium.selenium.names
            import dev.kolibrium.selenium.partialLinkText
            import dev.kolibrium.selenium.partialLinkTexts
            import dev.kolibrium.selenium.tagName
            import dev.kolibrium.selenium.tagNames
            import dev.kolibrium.selenium.xpath
            import dev.kolibrium.selenium.xpaths
            import org.openqa.selenium.WebDriver
            import org.openqa.selenium.WebElement

            context(WebDriver)
            public class KolibriumTestPage {
              public val entry1: WebElement by className("className")

              public val entry2: WebElement by cssSelector("cssSelector")

              public val entry3: WebElement by id("id")

              public val entry4: WebElement by linkText("linkText")

              public val entry5: WebElement by name("name")

              public val entry6: WebElement by partialLinkText("partialLinkText")

              public val entry7: WebElement by tagName("tagName")

              public val entry8: WebElement by xpath("xpath")

              public val entries1: WebElements by classNames("className")

              public val entries2: WebElements by cssSelectors("css")

              public val entries3: WebElements by ids("id")

              public val entries4: WebElements by linkTexts("linkText")

              public val entries5: WebElements by names("name")

              public val entries6: WebElements by partialLinkTexts("partialLinkText")

              public val entries7: WebElements by tagNames("tagName")

              public val entries8: WebElements by xpaths("xpath")
            }
            """.trimIndent(),
            compilation = compilation,
        )
    }

    @ValidTest
    fun `locator strategy annotation is missing`(
        @TempDir path: File,
    ) {
        val sourceFile =
            SourceFile.kotlin(
                "KolibriumTestPage.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Page
                enum class KolibriumTestPage {
                    entry
                }
                """.trimIndent(),
            )

        val compilation = getCompilation(path, sourceFile)
        verifyExitCode(compilation.compile(), KotlinCompilation.ExitCode.OK)

        assertSourceEquals(
            """
            // Code generated by kolibrium-codegen. Do not edit.
            package dev.kolibrium.ksp.processors.test.generated

            import dev.kolibrium.selenium.idOrName
            import org.openqa.selenium.WebDriver
            import org.openqa.selenium.WebElement

            context(WebDriver)
            public class KolibriumTestPage {
              public val entry: WebElement by idOrName("entry")
            }
            """.trimIndent(),
            compilation = compilation,
        )
    }

    @ValidTest
    fun `locator strategy annotation has Mustache template`(
        @TempDir path: File,
    ) {
        val sourceFile =
            SourceFile.kotlin(
                "KolibriumTestPage.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Page
                enum class KolibriumTestPage {
                    @CssSelectors(locator = "//a[@class='{{color}}']")
                    colorTableCell,

                    @CssSelector(locator = "//a[@class='{{color}}'][contains(text(),'{{shape}}')]")
                    tableCell
                }
                """.trimIndent(),
            )

        val compilation = getCompilation(path, sourceFile)
        verifyExitCode(compilation.compile(), KotlinCompilation.ExitCode.OK)

        assertSourceEquals(
            """
            // Code generated by kolibrium-codegen. Do not edit.
            package dev.kolibrium.ksp.processors.test.generated

            import dev.kolibrium.selenium.WebElements
            import dev.kolibrium.selenium.cssSelector
            import dev.kolibrium.selenium.cssSelectors
            import kotlin.String
            import org.openqa.selenium.WebDriver
            import org.openqa.selenium.WebElement

            context(WebDriver)
            public class KolibriumTestPage {
              public fun colorTableCell(color: String): WebElements {
                val locator = ${'"'}${'"'}${'"'}//a[@class='${'$'}color']${'"'}${'"'}${'"'}
                val element: WebElement by cssSelectors(locator)
                return element
              }

              public fun tableCell(color: String, shape: String): WebElement {
                val locator = ${'"'}${'"'}${'"'}//a[@class='${'$'}color'][contains(text(),'${'$'}shape')]${'"'}${'"'}${'"'}
                val element: WebElement by cssSelector(locator)
                return element
              }
            }
            """.trimIndent(),
            compilation = compilation,
        )
    }

    @ValidTest
    fun `class name retained`(
        @TempDir path: File,
    ) {
        val sourceFile =
            SourceFile.kotlin(
                "KolibriumTestPage.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Page
                enum class KolibriumTestPage {
                    entry
                }
                """.trimIndent(),
            )

        val compilation = getCompilation(path, sourceFile)
        verifyExitCode(compilation.compile(), KotlinCompilation.ExitCode.OK)

        assertSourceEquals(
            """
            // Code generated by kolibrium-codegen. Do not edit.
            package dev.kolibrium.ksp.processors.test.generated

            import dev.kolibrium.selenium.idOrName
            import org.openqa.selenium.WebDriver
            import org.openqa.selenium.WebElement

            context(WebDriver)
            public class KolibriumTestPage {
              public val entry: WebElement by idOrName("entry")
            }
            """.trimIndent(),
            compilation = compilation,
        )
    }

    @ValidTest
    fun `generated class name set to generatedClassName value`(
        @TempDir path: File,
    ) {
        val sourceFile =
            SourceFile.kotlin(
                "KolibriumTestPage.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Page("KolibriumForm")
                enum class KolibriumTestPage {
                    entry
                }
                """.trimIndent(),
            )

        val compilation = getCompilation(path, sourceFile)
        verifyExitCode(compilation.compile(), KotlinCompilation.ExitCode.OK)

        assertSourceEquals(
            """
            // Code generated by kolibrium-codegen. Do not edit.
            package dev.kolibrium.ksp.processors.test.generated

            import dev.kolibrium.selenium.idOrName
            import org.openqa.selenium.WebDriver
            import org.openqa.selenium.WebElement

            context(WebDriver)
            public class KolibriumForm {
              public val entry: WebElement by idOrName("entry")
            }
            """.trimIndent(),
            actualFileName = "KolibriumForm.kt",
            compilation = compilation,
        )
    }

    @ValidTest
    fun `original class name ends with 'Locators' suffix`(
        @TempDir path: File,
    ) {
        val sourceFile =
            SourceFile.kotlin(
                "KolibriumTestPage.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Page
                enum class KolibriumPageLocators {
                    entry
                }
                """.trimIndent(),
            )

        val compilation = getCompilation(path, sourceFile)
        verifyExitCode(compilation.compile(), KotlinCompilation.ExitCode.OK)

        assertSourceEquals(
            """
            // Code generated by kolibrium-codegen. Do not edit.
            package dev.kolibrium.ksp.processors.test.generated

            import dev.kolibrium.selenium.idOrName
            import org.openqa.selenium.WebDriver
            import org.openqa.selenium.WebElement

            context(WebDriver)
            public class KolibriumPage {
              public val entry: WebElement by idOrName("entry")
            }
            """.trimIndent(),
            actualFileName = "KolibriumPage.kt",
            compilation = compilation,
        )
    }

    @InvalidTest
    fun `class annotated with Page`(
        @TempDir path: File,
    ) {
        val sourceFile =
            SourceFile.kotlin(
                "KolibriumTestPage.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Page
                class KolibriumTestPage {
                }
                """.trimIndent(),
            )

        val result = getCompilation(path, sourceFile).compile()
        verifyExitCode(result, KotlinCompilation.ExitCode.COMPILATION_ERROR)
        result.messages shouldContain
            """
            Only enum classes can be annotated with @Page. Please make sure "KolibriumTestPage" is an enum class.
            """.trimIndent()
    }

    @InvalidTest
    fun `data class annotated with Page`(
        @TempDir path: File,
    ) {
        val sourceFile =
            SourceFile.kotlin(
                "KolibriumTestPage.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Page
                data class KolibriumTestPage {
                }
                """.trimIndent(),
            )

        val result = getCompilation(path, sourceFile).compile()
        verifyExitCode(result, KotlinCompilation.ExitCode.COMPILATION_ERROR)
        result.messages shouldContain
            """
            Only enum classes can be annotated with @Page. Please make sure "KolibriumTestPage" is an enum class.
            """.trimIndent()
    }

    @InvalidTest
    fun `object annotated with Page`(
        @TempDir path: File,
    ) {
        val sourceFile =
            SourceFile.kotlin(
                "KolibriumTestPage.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Page
                object KolibriumTestPage {
                }
                """.trimIndent(),
            )

        val result = getCompilation(path, sourceFile).compile()
        verifyExitCode(result, KotlinCompilation.ExitCode.COMPILATION_ERROR)
        result.messages shouldContain
            """
            Only enum classes can be annotated with @Page. Please make sure "KolibriumTestPage" is an enum class.
            """.trimIndent()
    }

    @InvalidTest
    fun `no enum entry defined`(
        @TempDir path: File,
    ) {
        val sourceFile =
            SourceFile.kotlin(
                "KolibriumTestPage.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Page
                class KolibriumTestPage {
                }
                """.trimIndent(),
            )

        val result = getCompilation(path, sourceFile).compile()
        verifyExitCode(result, KotlinCompilation.ExitCode.COMPILATION_ERROR)
        result.messages shouldContain "At least one enum shall be defined in \"KolibriumTestPage\"."
    }

    @InvalidTest
    fun `more than one locator annotation present`(
        @TempDir path: File,
    ) {
        val sourceFile =
            SourceFile.kotlin(
                "KolibriumTestPage.kt",
                """
                package dev.kolibrium.ksp.processors.test

                import dev.kolibrium.ksp.annotations.*

                @Page
                enum class KolibriumTestPage {
                  @Id("usr")
                  @Name
                  username,

                  @Id("pass")
                  @Name
                  password
                }
                """.trimIndent(),
            )

        val result = getCompilation(path, sourceFile).compile()
        verifyExitCode(result, KotlinCompilation.ExitCode.COMPILATION_ERROR)
        result.messages shouldContain "More than one locator annotation found on \"username\": @Id, @Name"
    }
}
